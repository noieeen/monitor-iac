# ---
# # Ensure necessary dependencies is installed
# # - name: Ensure wget is installed
# #   become: true
# #   apt:
# #     name: wget
# #     state: present
# #     update_cache: yes

# ############## End Dependencies ######################

# # - name: Add OpenTelemetry Collector GPG key
# #   become: true
# #   ansible.builtin.apt_key:
# #     url: https://packages.signalfx.com/otel-collector/gpgkey
# #     state: present
# #   tags: [otel_install]

# # - name: Add OpenTelemetry Collector repository
# #   become: true
# #   ansible.builtin.apt_repository:
# #     repo: "deb [arch=amd64] https://packages.signalfx.com/otel-collector/apt stable main"
# #     state: present
# #     update_cache: yes
# #   tags: [otel_install]

# # - name: Install OpenTelemetry Collector
# #   become: true
# #   ansible.builtin.apt:
# #     name: opentelemetry-collector
# #     state: present
# #   tags: [otel_install]

# # Work
# # - name: Install OpenTelemetry Collector
# #   ansible.builtin.include_role:
# #     name: grafana.grafana.opentelemetry_collector
# # - name: Download OpenTelemetry Collector GPG key
# #   become: true
# #   ansible.builtin.get_url:
# #     url: https://apt.opentelemetry.io/gpgkey
# #     dest: /etc/apt/keyrings/opentelemetry-collector-archive-keyring.gpg
# #     mode: '0644'

# # - name: Add OpenTelemetry Collector repository
# #   become: true
# #   ansible.builtin.apt_repository:
# #     repo: "deb [signed-by=/etc/apt/keyrings/opentelemetry-collector-archive-keyring.gpg] https://apt.opentelemetry.io/ stable main"
# #     state: present
# #     filename: opentelemetry-collector
# #     update_cache: yes

# # - name: Install OpenTelemetry Collector
# #   become: true
# #   ansible.builtin.apt:
# #     name: opentelemetry-collector
# #     state: present

# # - name: Enable and start OpenTelemetry Collector service
# #   become: true
# #   ansible.builtin.systemd:
# #     name: opentelemetry-collector
# #     enabled: yes
# #     state: started

# # Create user and group
# - name: Create OpenTelemetry group
#   group:
#     name: "{{ otel_group }}"
#     state: present
#   tags: [otel_install]

# - name: Create OpenTelemetry user
#   user:
#     name: "{{ otel_user }}"
#     group: "{{ otel_group }}"
#     system: yes
#     shell: /sbin/nologin
#     create_home: no
#   tags: [otel_install]

# # OpenTelemetry Collector Installation
# - name: Download OpenTelemetry Collector
#   become: true
#   get_url:
#     url: "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{ otel_version }}/otelcol-contrib_{{ otel_version }}_linux_amd64.tar.gz"
#     # url: "https://github.com/open-telemetry/opentelemetry-collector-contrib/archive/refs/tags/v{{ otel_version }}.tar.gz"
#     # url: "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/latest/download/otelcol-contrib_linux_amd64.tar.gz"
#     dest: "/tmp/otelcol-contrib.tar.gz"
#     mode: "0644"
#   tags: [otel_install]

# - name: Check if OpenTelemetry binary exists
#   stat:
#     path: "/usr/local/bin/otelcol-contrib"
#   register: otel_binary
#   tags: [otel_install]

# - name: Create temporary extraction directory
#   file:
#     path: "/tmp/otelcol-extract"
#     state: directory
#     mode: "0755"
#   when: not otel_binary.stat.exists
#   tags: [otel_install]

# - name: Extract OpenTelemetry Collector
#   become: true
#   unarchive:
#     src: "/tmp/otelcol-contrib.tar.gz"
#     dest: "/tmp/otelcol-extract/"
#     remote_src: yes
#   when: not otel_binary.stat.exists
#   tags: [otel_install]

# - name: Copy otelcol-contrib binary to final location
#   copy:
#     src: "/tmp/otelcol-extract/otelcol-contrib"
#     dest: "/usr/local/bin/otelcol-contrib"
#     mode: "0755"
#     remote_src: yes
#   when: not otel_binary.stat.exists
#   tags: [otel_install]

# - name: Clean up temporary extraction directory
#   file:
#     path: "/tmp/otelcol-extract"
#     state: absent
#   when: not otel_binary.stat.exists
#   tags: [otel_install]
#   # Setup directories and service
# - name: Create OpenTelemetry config directory
#   file:
#     path: "{{ otel_config_dir }}"
#     state: directory
#     mode: "0755"
#     owner: "{{ otel_user }}"
#     group: "{{ otel_group }}"
#   tags: [otel_install]

# - name: Create data directory for OpenTelemetry
#   file:
#     path: "/var/lib/otel-collector"
#     state: directory
#     mode: "0755"
#     owner: "{{ otel_user }}"
#     group: "{{ otel_group }}"
#   tags: [otel_install]

# - name: Create log directory for OpenTelemetry
#   file:
#     path: "/var/log/otel-collector"
#     state: directory
#     mode: "0755"
#     owner: "{{ otel_user }}"
#     group: "{{ otel_group }}"
#   tags:
#     [otel_install]

#     # Create systemd service
# - name: Create OpenTelemetry systemd service
#   template:
#     src: otel-collector.service.j2
#     dest: "/etc/systemd/system/{{ otel_service_name }}.service"
#     mode: "0644"
#   tags: [otel_install]

# - name: Reload systemd
#   systemd:
#     daemon_reload: yes
#   tags: [otel_install]

# - name: Enable OpenTelemetry service
#   systemd:
#     name: "{{ otel_service_name }}"
#     enabled: yes
#   tags: [otel_install]
# # - name: Move otelcol-contrib binary
# #   become: true
# #   copy:
# #     src: "/usr/local/bin/otelcol_dir/otelcol-contrib"
# #     dest: "/usr/local/bin/otelcol-contrib"
# #     mode: "0755"
# #     remote_src: yes
# #   when: not otel_binary.stat.exists
# #   tags: [otel_install]

# # - name: Set execute permission on otelcol-contrib
# #   become: true
# #   file:
# #     path: /usr/local/bin/otelcol-contrib
# #     mode: "0755"
# #     state: file
# #   tags: [otel_install]

# # - name: Create OpenTelemetry config directory
# #   become: true
# #   file:
# #     path: "{{ otel_config_dir }}"
# #     state: directory
# #     mode: "0755"
# #   tags: [otel_install]

# # - name: Configure OpenTelemetry with ClickHouse exporter
# #   become: true
# #   template:
# #     src: ./config/otel-config.yaml.j2
# #     dest: "{{ otel_config_dir }}/config.yaml"
# #     mode: "0644"
# #   notify: restart otel-collector
# #   tags: [otel_install]

# # - name: Create OpenTelemetry systemd service
# #   become: true
# #   template:
# #     src: ./config/otel-collector.service.j2
# #     dest: "/etc/systemd/system/{{ otel_service_name }}.service"
# #     mode: "0644"
# #   tags: [otel_install]

# # - name: Reload systemd
# #   become: true
# #   systemd:
# #     daemon_reload: yes
# #   tags: [otel_install]

# # - name: Start and enable OpenTelemetry service
# #   become: true
# #   service:
# #     name: "{{ otel_service_name }}"
# #     state: started
# #     enabled: yes
# #   tags: [otel_install]

- name: Create OpenTelemetry group
  group:
    name: "{{ otel_group }}"
    state: present
  tags: [otel_install]

- name: Create OpenTelemetry user
  user:
    name: "{{ otel_user }}"
    group: "{{ otel_group }}"
    system: yes
    shell: /sbin/nologin
    create_home: no
  tags: [otel_install]

# OpenTelemetry Collector Installation
- name: Download OpenTelemetry Collector binary
  become: true
  get_url:
    url: "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{ otel_version }}/otelcol-contrib_{{ otel_version }}_linux_amd64.tar.gz"
    # url: "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{ otel_version }}/otelcol-contrib_{{ otel_version }}_linux_amd64.tar.gz"
    dest: "/tmp/otelcol-contrib.tar.gz"
    mode: "0644"
  tags: [otel_install]

- name: Check if OpenTelemetry binary exists
  stat:
    path: "/usr/local/bin/otelcol-contrib"
  register: otel_binary
  tags: [otel_install]

- name: Create temporary extraction directory
  file:
    path: "/tmp/otelcol-extract"
    state: directory
    mode: "0755"
  when: not otel_binary.stat.exists
  tags: [otel_install]

- name: Extract OpenTelemetry Collector
  become: true
  unarchive:
    src: "/tmp/otelcol-contrib.tar.gz"
    dest: "/tmp/otelcol-extract/"
    remote_src: yes
  when: not otel_binary.stat.exists
  tags: [otel_install]

- name: List extracted files (debug)
  shell: find /tmp/otelcol-extract -type f | head -20
  register: extracted_files
  when: not otel_binary.stat.exists
  tags: [otel_install]

- name: Debug extracted files
  debug:
    var: extracted_files.stdout_lines
  when: not otel_binary.stat.exists
  tags: [otel_install]

# - name: Copy otelcol-contrib binary to final location
#   copy:
#     src: "/tmp/otelcol-extract/opentelemetry-collector-contrib-{{ otel_version}}"
#     dest: "/usr/local/bin/otelcol-contrib"
#     mode: "0755"
#     remote_src: yes
#   when: not otel_binary.stat.exists
#   tags: [otel_install]

- name: Copy otelcol-contrib binary to final location
  copy:
    src: "/tmp/otelcol-extract/otelcol-contrib"
    dest: "/usr/local/bin/otelcol-contrib"
    mode: "0755"
    remote_src: yes
  when: not otel_binary.stat.exists
  tags: [otel_install]

- name: Clean up temporary extraction directory
  file:
    path: "/tmp/otelcol-extract"
    state: absent
  when: not otel_binary.stat.exists
  tags: [otel_install]

# Setup directories and service
- name: Create OpenTelemetry config directory
  file:
    path: "{{ otel_config_dir }}"
    state: directory
    mode: "0755"
    owner: "{{ otel_user }}"
    group: "{{ otel_group }}"
  tags: [otel_install]

- name: Create data directory for OpenTelemetry
  file:
    path: "/var/lib/otel-collector"
    state: directory
    mode: "0755"
    owner: "{{ otel_user }}"
    group: "{{ otel_group }}"
  tags: [otel_install]

- name: Create log directory for OpenTelemetry
  file:
    path: "/var/log/otel-collector"
    state: directory
    mode: "0755"
    owner: "{{ otel_user }}"
    group: "{{ otel_group }}"
  tags: [otel_install]


# Copy OpenTelemetry config file
- name: Configure OpenTelemetry with ClickHouse exporter
  become: true
  template:
    src: ./config/otel-config.yaml.j2
    dest: "{{ otel_config_dir }}/config.yaml"
    mode: "0644"
  notify: restart otel-collector
  tags: [otel_install]

# Create systemd service
- name: Create OpenTelemetry systemd service
  template:
    src: ./config/otel-collector.service.j2
    dest: "/etc/systemd/system/{{ otel_service_name }}.service"
    mode: "0644"
  tags: [otel_install]

- name: Reload systemd
  systemd:
    daemon_reload: yes
  tags: [otel_install]

- name: Enable OpenTelemetry service
  systemd:
    name: "{{ otel_service_name }}"
    enabled: yes
  tags: [otel_install]
