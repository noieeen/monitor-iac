# OpenTelemetry Collector Configuration
# Revised based on feedback and spanmetrics fix.

receivers:
  otlp:
    protocols:
      grpc:
        # Default OTLP gRPC endpoint
        endpoint: "0.0.0.0:4317"
      http:
        # Default OTLP HTTP endpoint
        endpoint: "0.0.0.0:4318"
        # WARNING: These CORS settings are very permissive.
        # For production, restrict allowed_origins to specific domains.
        cors:
          allowed_origins:
            - "http://*"
            - "https://*"

processors:
  # Default batch processor - used for non-ClickHouse pipelines (e.g., spanmetrics processing)
  batch:
    # Shorter timeout suitable for general processing before connectors/other exporters
    timeout: 1s
    # Large batch size, adjust based on typical traffic
    send_batch_size: 102400

  # Named batch processor specifically tuned for ClickHouse exports
  batch/clickhouse:
    # Longer timeout potentially better for database writes
    timeout: 5s
    # Large batch size for ClickHouse efficiency
    send_batch_size: 100000

  # Default memory limiter - used for pipelines not specifically targeting ClickHouse
  memory_limiter:
    check_interval: 1s
    # Adjusted limit - Set based on available system memory.
    # Example: 4000 MiB (~4 GiB). Monitor actual usage and adjust.
    limit_mib: 4000
    # Optional: Define a spike limit if needed
    # spike_limit_mib: 800

  # Named memory limiter for pipelines exporting directly to ClickHouse
  memory_limiter/clickhouse:
    check_interval: 2s
    # A more constrained limit for ClickHouse export path
    limit_mib: 1800 # ~1.8 GiB
    spike_limit_mib: 500 # Allow temporary bursts

  # Detects host resources (like hostname)
  resourcedetection/system:
    detectors: ["system"]
    system:
      hostname_sources: ["os"]

exporters:
  # Example OTLP exporter to Vector (or another collector/backend)
  # Kept commented out for future use.
  # otlp/vector:
  #   endpoint: "vector:4317" # Assumes a service named 'vector'
  #   tls:
  #     insecure: true # Use secure TLS in production

  # ClickHouse exporter configuration
  clickhouse:
    # Endpoint for your ClickHouse instance (TCP interface)
    endpoint: tcp://127.0.0.1:9000
    # Target database (must exist)
    database: otel
    # Table names (will be created if they don't exist)
    logs_table_name: otel_logs
    traces_table_name: otel_traces
    metrics_table_name: otel_metrics
    # Time-to-live for data in ClickHouse tables
    ttl: 12h
    # Connection/write timeout
    timeout: 10s
    # Internal queue settings for handling export pressure
    sending_queue:
      queue_size: 100
    # Retry settings for transient connection/write issues
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s

connectors:
  # Connector to generate metrics from spans (e.g., RED metrics)
  spanmetrics:
    namespace: span.metrics # Optional namespace for generated metrics

service:
  pipelines:
    # Pipeline for METRICS received via OTLP OR generated by spanmetrics -> ClickHouse
    metrics/clickhouse:
      # Receives metrics directly via OTLP AND metrics generated by the spanmetrics connector
      receivers: [otlp, spanmetrics] # <-- Added spanmetrics here
      # Use dedicated ClickHouse limiter, add system resources, use ClickHouse batch settings
      processors: [memory_limiter/clickhouse, resourcedetection/system, batch/clickhouse]
      exporters: [clickhouse]

    # Pipeline for TRACES received via OTLP -> ClickHouse
    traces/clickhouse:
      receivers: [otlp]
      # Use dedicated ClickHouse limiter, add system resources, use ClickHouse batch settings
      processors: [memory_limiter/clickhouse, resourcedetection/system, batch/clickhouse]
      exporters: [clickhouse]

    # Pipeline for TRACES received via OTLP -> SpanMetrics Connector (for metric generation)
    traces/spanmetrics:
      receivers: [otlp]
      # Use default (adjusted) limiter, add system resources (for generated metrics), use default batch settings
      processors: [memory_limiter, resourcedetection/system, batch]
      # Send traces TO the spanmetrics connector
      exporters: [spanmetrics]

    # Pipeline for LOGS received via OTLP -> ClickHouse
    logs/clickhouse:
      receivers: [otlp]
      # Use dedicated ClickHouse limiter, add system resources, use ClickHouse batch settings
      processors: [memory_limiter/clickhouse, resourcedetection/system, batch/clickhouse]
      exporters: [clickhouse]

    # Example pipeline for LOGS -> Vector (Commented Out)
    # logs/vector:
    #   receivers: [ otlp ]
    #   # Uses default memory limiter and batch settings for this example path
    #   processors: [ memory_limiter, batch ]
    #   exporters: [ otlp/vector ]

  # Optional: Enable built-in telemetry for the collector itself
  # telemetry:
  #   logs:
  #     level: "info" # Can be debug, info, warn, error
  #   metrics:
  #     level: detailed # Or basic, normal, detailed
  #     address: "0.0.0.0:8888" # Prometheus endpoint for collector's own metrics